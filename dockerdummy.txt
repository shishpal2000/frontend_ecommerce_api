# 1. Base stage - Common dependencies and setup
FROM node:20-alpine AS base

# Install security updates and dumb-init for proper signal handling
RUN apk update && apk upgrade && apk add --no-cache dumb-init 

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./

# =============================================================================
# 2. Dependencies stage - Install all dependencies
FROM base AS deps

# Install dependencies with npm ci for faster, reliable builds
RUN npm ci

# =============================================================================
# 3. Development stage - For local development with hot reload
FROM deps AS development

# Set development environment
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV WATCHPACK_POLLING=true
ENV CHOKIDAR_USEPOLLING=true
ENV CHOKIDAR_INTERVAL=500

# Copy source code
COPY --chown=nextjs:nodejs . .

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Use dumb-init to handle signals properly and start dev server with host binding
ENTRYPOINT ["dumb-init", "--"]
CMD ["npm", "run", "dev", "--", "--hostname", "0.0.0.0"]

# =============================================================================
# 4. Builder stage - Build the application
FROM deps AS builder

# Set build environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Copy source code
COPY --chown=nextjs:nodejs . .

# Build the application
RUN npm run build

# =============================================================================
# 5. Production stage - Optimized runtime image
FROM base AS production

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Install only production dependencies
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]



print view 

"

"use client";

import React, { useState } from "react";
import { useAuth } from "@/hooks/useAuth";

function PrintLayout({ arrayData }: any) {
  const { user } = useAuth();
  const styleName = "SAMPLE DEV FORM";
  const [orientation, setOrientation] = useState<"portrait" | "landscape">(
    "portrait"
  );

  console.log("role:", user?.name);

  return (
    <div
      className={`container mx-auto my-12 print ${
        orientation === "landscape" ? "landscape-mode" : "portrait-mode"
      }`}
    >
      {/* Print controls - only visible on screen, hidden when printing */}
      <div className="print-hidden mb-8">
        <div className="flex items-center justify-between bg-gray-100 p-4 rounded-lg">
          <h2 className="text-xl font-bold">Print Options</h2>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <label htmlFor="orientation" className="font-medium">
                Page Orientation:
              </label>
              <select
                id="orientation"
                className="border rounded px-2 py-1"
                value={orientation}
                onChange={(e) =>
                  setOrientation(e.target.value as "portrait" | "landscape")
                }
              >
                <option value="portrait">Portrait</option>
                <option value="landscape">Landscape</option>
              </select>
            </div>
            <button
              onClick={() => window.print()}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
            >
              Print Now
            </button>
          </div>
        </div>

        <div className="mt-4 p-3 bg-yellow-50 border-l-4 border-yellow-400">
          <p className="text-sm">
            <strong>Note:</strong> Landscape mode is optimized for wide tables
            and detailed views. Portrait is better for text-heavy content.
          </p>
        </div>
      </div>

      {/* Page header - will appear on every printed page */}
      <div className="page-header">
        <div className="flex justify-between w-full">
          <p>User Name: {user?.name}</p>
          <div>
            <p>Date: {new Date().toLocaleDateString()}</p>
            <p>Time: {new Date().toLocaleTimeString()}</p>
          </div>
        </div>
      </div>

      <div className="w-full flex items-center mb-4 relative my-2 border-2 p-4">
        <h2 className="absolute left-1/2 transform -translate-x-1/2 text-xl font-semibold text-gray-700 whitespace-nowrap">
          FROM 99 Print View - {styleName}
        </h2>
      </div>

      {/* Order Details Section */}
      <div className="mt-4 pt-1 border-2">
        <h3 className="text-lg font-semibold text-gray-700 text-center border-b-2 py-2 mb-0">
          Order Information
        </h3>
        {/* ...existing Order Information content... */}
      </div>

      {/** merchant section */}
      <div className="print-page-break print-avoid-break">
        <h3 className="text-lg font-semibold text-gray-700 text-center border-2 py-2 my-3">
          Merchant Information
        </h3>
        {/* ...existing Merchant Information content... */}
      </div>

      {/* Specs Section - Perfect for landscape */}
      <div className="print-page-break print-avoid-break">
        <h3 className="text-lg font-bold text-center border-2 py-2 my-4">
          SPECS INFORMATION
        </h3>
        {/* ...existing Specs Information content... */}
      </div>

      {/** comment section */}
      <div className="print-page-break print-avoid-break">
        <h3 className="text-lg font-bold text-center border-2 py-2 my-4">
          COMMENT INFORMATION
        </h3>
        {/* ...existing Comment Information content... */}
      </div>

      <style jsx>{`
        @media print {
          /* Hide print controls when printing */
          .print-hidden {
            display: none !important;
          }

          /* Set page orientation and margins */
          @page {
            size: ${orientation};
            margin: 15mm 10mm 10mm 10mm;
          }

          /* Page header that appears on every printed page */
          .page-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 50px;
            background: white;
            border-bottom: 2px solid #000;
            padding: 10px;
            display: flex;
            align-items: center;
            font-size: 14px;
            font-weight: bold;
            z-index: 1000;
            margin-bottom: 20px;
          }

          /* Add top margin to body to account for fixed header */
          body {
            margin: 0 !important;
            padding-top: 70px !important;
          }

          /* Ensure sections never split across pages */
          .print-avoid-break {
            page-break-inside: avoid;
            break-inside: avoid;
          }

          /* Always start a new page for sections marked */
          .print-page-break {
            page-break-before: always;
            break-before: page;
            margin-top: 20px;
            padding-top: 20px;
          }

          /* Ensure images don't break between pages */
          .divBreak {
            page-break-inside: avoid;
            break-inside: avoid;
          }

          /* Landscape specific styling */
          .landscape-mode .landscape-table {
            width: 100%;
            table-layout: fixed;
          }

          .landscape-mode .landscape-box {
            display: inline-block;
            width: 30%;
            vertical-align: top;
            margin-right: 1%;
          }

          .landscape-mode .landscape-merchant {
            display: flex;
            flex-direction: row;
          }

          .landscape-mode .landscape-comment-table td img {
            max-height: 200px;
          }

          img {
            page-break-inside: avoid;
            break-inside: avoid;
          }

          * {
            -webkit-print-color-adjust: exact !important;
            color-adjust: exact !important;
            print-color-adjust: exact !important;
          }
        }

        /* Screen-only styles for the print preview */
        @media screen {
          /* Hide page header on screen, show only in print */
          .page-header {
            display: none;
          }

          .landscape-mode {
            width: 11in;
            max-width: 100%;
            margin: 0 auto;
          }

          .portrait-mode {
            width: 8.5in;
            max-width: 100%;
            margin: 0 auto;
          }

          /* Simulate landscape page look in preview */
          .landscape-mode .landscape-table {
            width: 100%;
            table-layout: fixed;
          }

          .landscape-mode .landscape-box {
            display: inline-block;
            width: 30%;
            vertical-align: top;
            margin-right: 1%;
          }
        }
      `}</style>
    </div>
  );
}

export default PrintLayout;

"